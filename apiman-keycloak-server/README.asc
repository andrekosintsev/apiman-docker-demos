= apiman with external Keycloak server

This demo has *one wildfly server* with the 4 apiman capabilities (using the embedded H2 database):

* APIManager UI
* APIManager backend
* APIGateway config
* APIGateway runtime

and it has an additional *Keycloak server* on another wildfly instance, and using an embedded H2 database.

image:images/architecture.png[architecture]

NOTE: Due to a restriction on Keycloak running on docker private environments, this demo is using host networking for the apiman and keycloak server. 

== How to run the demo
To run this demo just do:

----
$ fig up
----

This will start the 3 containers in foreground.

You can experiment with the different options that http://www.fig.sh/[fig] provides, but once you have the containers created, you can *start* and *stop* them easily.

== Endpoints and ports
The demo will expose 3 ports on localhost:

- http://localhost:8080/apiman-manager[http://localhost:8080/apiman-manager (APIManager UI)]
- http://localhost:9990/console[http://localhost:9990/console (APIMan Wildfly console)]
- http://localhost:9080//auth/admin[http://localhost:9080/auth/admin (Keycloak Admin UI)]
- http://localhost:10990/console[http://localhost:10990/console (APIMan Wildfly console)]

== Demo services to test
http://www.jsontest.com/[Here] you can find some public REST services to test against.

- http://ip.jsontest.com/
- http://headers.jsontest.com/
- http://date.jsontest.com/

== Users
apiman can be used with the following users:

* admin/admin123!

keycloak can be used with the following users:

* admin/admin

== Bootstrap required
As of now, it is required to:

* Create a gateway (There is one available at http://localhost:8080/apiman-gateway-api)

image:images/gateway.png[Gateway]

* Add available policies (File is located here: ./all-policyDefs.json)

image:images/policies1.png[Policies add]

image:images/policies2.png[Policies view]

* Create a role that will allow you to run the demo (which will be granted for Organizations admins by default. You can add all available permissions.)

image:images/role1.png[Roles add]

image:images/role2.png[Roles view]


== Cleanup
To clean everything up, do:

----
fig -y rm
----
