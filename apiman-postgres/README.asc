= apiman with an external postgres database + sample services server

NOTE: Until apiman 1.0.2.Final is release, please tag the development version to it. 

----
docker tag apiman-distro-wildfly8:1.0.2-SNAPSHOT apiman/on-wildfly8:1.0.2.Final
----

This demo has *one wildfly server* with the 4 apiman capabilities:

* APIManager UI
* APIManager backend
* APIGateway config
* APIGateway runtime

Plus also the Keycloak server is on the same wildfly instance, and using an embedded H2 database.

apiman schema is created in *a postgres database*, and apiman is configured to use that postgres database. For this, the apiman instance has the following changes over the official one:

* the postgres jdbc driver (postgresql-9.3-1102.jdbc41.jar)
* apiman-ds.xml

----
<?xml version="1.0" encoding="UTF-8"?>
<datasources xmlns="http://www.jboss.org/ironjacamar/schema">
	<datasource enabled="true" jndi-name="jdbc/ApiManagerDS" pool-name="apiman-manager-api" use-java-context="true">
		<connection-url>jdbc:postgresql://postgresserver:5432/apiman</connection-url>
		<driver>postgresql-9.3-1102.jdbc41.jar</driver>
		<pool>
			<max-pool-size>30</max-pool-size>
		</pool>
		<security>
			<user-name>apiman</user-name>
			<password>apiman_p123</password>
		</security>
	</datasource>
</datasources>
----

And there is an additional wildfly server with an Echo sample service. This service is accesible at *http://services:8080/apiman-echo* from the apiman server. (From the host, port 8081 is exposed locally)

image:images/apiman-postgres-docker-container.png[apiman postgres demo]

== How to run the demo
As postgres docker image needs to create the database the first time it runs, it will take some time, so you should start the postgres service, wait some time, and start apiman. This is only required for the first boot.

----
$ fig up -d postgres services && sleep 10 && fig up --no-recreate apiman
----

This will start the postgres and services containers in background and wait some time to start the apiman server in foreground.

You can experiment with the different options that http://www.fig.sh/[fig] provides, but once you have the containers created, you can *start* and *stop* them easily.

== Endpoints and ports
The demo will expose 3 ports on localhost:

- http://localhost:8080/apiman-manager[http://localhost:8080/apiman-manager (APIManager UI)]
- http://localhost:9990/console[http://localhost:9990/console (Wildfly console)]
- jdbc:postgresql://localhost:5432/apiman (apiman database)
- http://localhost:8081/apiman-echo (echo service)


== Bootstrap required
As of now, it is required to:

* Create a gateway (There is one available at http://localhost:8080/apiman-gateway-api)

image:images/gateway.png[Gateway]

* Add available policies (File is located here: ./all-policyDefs.json)

image:images/policies1.png[Policies add]

image:images/policies2.png[Policies view]

* Create a role that will allow you to run the demo (which will be granted for Organizations admins by default. You can add all available permissions.)

image:images/role1.png[Roles add]

image:images/role2.png[Roles view]


== Cleanup
To clean everything up, do:

----
fig -y rm
----


== TIPS

=== Run a postgres Database standalone with docker
To run a postgres database from scratch, with docker, run:

----
docker run --name postgres --rm -p 5432:5432 -e POSTGRES_USER=apiman -e POSTGRES_PASSWORD=apiman_p123 -it --rm postgres
----
